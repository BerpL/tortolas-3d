/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.1.1
 * Fri, 06 Oct 2023 17:36:32 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'percentage', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', false);
  setHTMLElemStyle('display', 'flex', 'info_screen', false);
  setHTMLElemStyle('display', 'flex', 'titulo_container', false);
  setHTMLElemStyle('display', 'flex', 'powered_by_eduverso_img', false);
  setHTMLElemStyle('display', 'flex', 'nota_1', false);
  setHTMLElemStyle('display', 'none', 'btn_next_1', false);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["setToFalseAllVariablesEquipoActual"] = setToFalseAllVariablesEquipoActual;

var PROC = {
    "setToFalseAllVariablesEquipoActual": setToFalseAllVariablesEquipoActual,
};

var VARS = Object.defineProperties({}, {
    'is_ft_loaded': { get: function() { return is_ft_loaded; }, set: function(val) { is_ft_loaded = val; } },
    'selected': { get: function() { return selected; }, set: function(val) { selected = val; } },
    'arnes_1': { get: function() { return arnes_1; }, set: function(val) { arnes_1 = val; } },
    'arnes_2': { get: function() { return arnes_2; }, set: function(val) { arnes_2 = val; } },
    'linea_de_vida_1': { get: function() { return linea_de_vida_1; }, set: function(val) { linea_de_vida_1 = val; } },
    'linea_de_vida_2': { get: function() { return linea_de_vida_2; }, set: function(val) { linea_de_vida_2 = val; } },
    'vara_en_el_suelo_1': { get: function() { return vara_en_el_suelo_1; }, set: function(val) { vara_en_el_suelo_1 = val; } },
    'etiqueta_roja_1': { get: function() { return etiqueta_roja_1; }, set: function(val) { etiqueta_roja_1 = val; } },
    'equipo-id': { get: function() { return equipo_id; }, set: function(val) { equipo_id = val; } },
    'submenu-opciones': { get: function() { return submenu_opciones; }, set: function(val) { submenu_opciones = val; } },
    'pos': { get: function() { return pos; }, set: function(val) { pos = val; } },
    'dir': { get: function() { return dir; }, set: function(val) { dir = val; } },
    'objeto': { get: function() { return objeto; }, set: function(val) { objeto = val; } },
    'info': { get: function() { return info; }, set: function(val) { info = val; } },
    'infoContainer': { get: function() { return infoContainer; }, set: function(val) { infoContainer = val; } },
    'infoContainerBtnCerrar': { get: function() { return infoContainerBtnCerrar; }, set: function(val) { infoContainerBtnCerrar = val; } },
    'idPostSend': { get: function() { return idPostSend; }, set: function(val) { idPostSend = val; } },
    'idSeccion': { get: function() { return idSeccion; }, set: function(val) { idSeccion = val; } },
    'nombreEquipo': { get: function() { return nombreEquipo; }, set: function(val) { nombreEquipo = val; } },
    'is_opened_submenu1': { get: function() { return is_opened_submenu1; }, set: function(val) { is_opened_submenu1 = val; } },
    'is_eq_1_1': { get: function() { return is_eq_1_1; }, set: function(val) { is_eq_1_1 = val; } },
    'is_eq_1_2': { get: function() { return is_eq_1_2; }, set: function(val) { is_eq_1_2 = val; } },
    'is_eq_1_3': { get: function() { return is_eq_1_3; }, set: function(val) { is_eq_1_3 = val; } },
    'is_eq_1_4': { get: function() { return is_eq_1_4; }, set: function(val) { is_eq_1_4 = val; } },
    'is_eq_2_1': { get: function() { return is_eq_2_1; }, set: function(val) { is_eq_2_1 = val; } },
    'is_eq_2_2': { get: function() { return is_eq_2_2; }, set: function(val) { is_eq_2_2 = val; } },
    'is_eq_2_3': { get: function() { return is_eq_2_3; }, set: function(val) { is_eq_2_3 = val; } },
    'is_eq_2_4': { get: function() { return is_eq_2_4; }, set: function(val) { is_eq_2_4 = val; } },
    'is_eq_3_1': { get: function() { return is_eq_3_1; }, set: function(val) { is_eq_3_1 = val; } },
    'is_eq_3_2': { get: function() { return is_eq_3_2; }, set: function(val) { is_eq_3_2 = val; } },
    'is_eq_3_3': { get: function() { return is_eq_3_3; }, set: function(val) { is_eq_3_3 = val; } },
    'is_eq_3_4': { get: function() { return is_eq_3_4; }, set: function(val) { is_eq_3_4 = val; } },
    'is_eq_3_5': { get: function() { return is_eq_3_5; }, set: function(val) { is_eq_3_5 = val; } },
    'is_eq_3_6': { get: function() { return is_eq_3_6; }, set: function(val) { is_eq_3_6 = val; } },
    'is_eq_3_7': { get: function() { return is_eq_3_7; }, set: function(val) { is_eq_3_7 = val; } },
    'is_eq_3_8': { get: function() { return is_eq_3_8; }, set: function(val) { is_eq_3_8 = val; } },
    'is_eq_3_9': { get: function() { return is_eq_3_9; }, set: function(val) { is_eq_3_9 = val; } },
    'is_eq_3_10': { get: function() { return is_eq_3_10; }, set: function(val) { is_eq_3_10 = val; } },
    'is_opened_submenu2': { get: function() { return is_opened_submenu2; }, set: function(val) { is_opened_submenu2 = val; } },
    'is_opened_submenu3': { get: function() { return is_opened_submenu3; }, set: function(val) { is_opened_submenu3 = val; } },
    'is_menu_principal_opened': { get: function() { return is_menu_principal_opened; }, set: function(val) { is_menu_principal_opened = val; } },
});

var is_ft_loaded, is_menu_principal_opened, equipo_id, submenu_opciones, pos, dir, objeto, info, infoContainer, infoContainerBtnCerrar, idPostSend, idSeccion, nombreEquipo, is_opened_submenu1, is_opened_submenu2, is_opened_submenu3, is_eq_1_1, is_eq_1_2, selected, is_eq_1_3, is_eq_1_4, is_eq_2_1, is_eq_2_2, is_eq_2_3, is_eq_2_4, is_eq_3_1, is_eq_3_2, is_eq_3_3, is_eq_3_4, is_eq_3_5, is_eq_3_6, is_eq_3_7, is_eq_3_8, is_eq_3_9, is_eq_3_10, arnes_1, arnes_2, linea_de_vida_1, linea_de_vida_2, vara_en_el_suelo_1, etiqueta_roja_1;

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function _checkListenersSame(target0, type0, listener0, optionsOrUseCapture0,
        target1, type1, listener1, optionsOrUseCapture1) {
    const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
            ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
    const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
            ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
    return target0 === target1 && type0 === type1 && listener0 === listener1
            && capture0 === capture1;
}

/**
 * Add the specified event listener to the specified target. This function also
 * stores listener data for easier disposing.
 */
function bindListener(target, type, listener, optionsOrUseCapture) {
    const alreadyExists = _pGlob.eventListeners.some(elem => {
        return _checkListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
    });

    if (!alreadyExists) {
        target.addEventListener(type, listener, optionsOrUseCapture);
        _pGlob.eventListeners.push({ target, type, listener, optionsOrUseCapture });
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        bindListener(elem, eventType, callback);
    }
}

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    getDuration: function() {
        return this.source.duration;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// playSound puzzle
function playSound(mediaElem, loop) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setLoop(loop);
        mediaElem.play();
    });
}

// volume puzzle
function volume(mediaElem, volume) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElems.forEach(mediaElem => {
        mediaElem.setVolume(v3d.MathUtils.clamp(volume, 0.0, 1.0));
    });
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
const eulerV3DToBlenderShortest = function() {

    const eulerTmp = new v3d.Euler();
    const eulerTmp2 = new v3d.Euler();
    const vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
        const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// stopSound puzzle
function stopSound(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.stop();
    });
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    bindListener(elem, eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        bindListener(elem, touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// bindHTMLObject puzzle
_pGlob.bindHTMLCallbackInfo = [];

function bindHTMLObject(objName, id, isParent) {
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var projected = new v3d.Vector3();
    elem.style.top = 0;
    elem.style.left = 0;
    function bindHTMLUpdateCb() {
        var camera = appInstance.getCamera(true);
        camera.updateMatrixWorld();
        obj.getWorldPosition(projected).project(camera);

        var isBehindCamera = false;
        var farNearCoeff = (camera.far + camera.near) / (camera.far - camera.near);
        if (camera.isPerspectiveCamera) {
            isBehindCamera = projected.z > farNearCoeff;
        } else if (camera.isOrthographicCamera) {
            isBehindCamera = projected.z < -farNearCoeff;
        }

        if (isBehindCamera) {
            // behind the camera, just move the element out of the sight
            projected.x = projected.y = -1e5;
        } else {
            projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
            projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        }

        elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
    }

    _pGlob.bindHTMLCallbackInfo.push({
        elem: elem,
        obj: obj,
        callback: bindHTMLUpdateCb
    });

    appInstance.renderCallbacks.push(bindHTMLUpdateCb);
    if (PL.editorRenderCallbacks)
        PL.editorRenderCallbacks.push([appInstance, bindHTMLUpdateCb]);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}

// Describe this function...
function setToFalseAllVariablesEquipoActual() {
  is_eq_1_1 = false;
  is_eq_1_2 = false;
  is_eq_1_3 = false;
  is_eq_1_4 = false;
  is_eq_2_1 = false;
  is_eq_2_2 = false;
  is_eq_2_3 = false;
  is_eq_2_4 = false;
  is_eq_3_1 = false;
  is_eq_3_2 = false;
  is_eq_3_3 = false;
  is_eq_3_4 = false;
  is_eq_3_5 = false;
  is_eq_3_6 = false;
  is_eq_3_7 = false;
  is_eq_3_8 = false;
  is_eq_3_9 = false;
  is_eq_3_10 = false;
}


is_ft_loaded = true;
eventHTMLElem('click', 'btn_abrir_informacion', false, function(event) {
  setHTMLElemStyle('display', 'flex', 'info_screen', false);
});
eventHTMLElem('click', 'btn_cerrar_informacion', false, function(event) {
  if (is_ft_loaded == true) {
    is_ft_loaded = false;
    setHTMLElemStyle('display', 'flex', 'btn_abrir_informacion', false);
    setHTMLElemStyle('display', 'none', 'info_screen', false);
    playSound(loadMedia_HTML5('../audios/Feeder.mp3'), true);
    volume(loadMedia_HTML5('../audios/Feeder.mp3'), 0.03);
    tweenCamera('camera_002', 'camera_direccion_002', 1, function() {
      playSound(loadMedia_HTML5('./audios/nota_1.mp3'), false);
      registerSetTimeout(6, function() {
        setHTMLElemStyle('display', 'flex', 'btn_next_1', false);
      });
      setHTMLElemStyle('display', 'flex', 'nota_1', false);
    }, 0);
  } else {
    setHTMLElemStyle('display', 'flex', 'btn_abrir_informacion', false);
    setHTMLElemStyle('display', 'none', 'info_screen', false);
  }
});

changeVis('personaje4', false);

eventHTMLElem('click', 'btn_next_1', false, function(event) {
  playSound(loadMedia_HTML5('./audios/nota_2.mp3'), false);
  setHTMLElemStyle('display', 'none', 'btn_next_1', false);
  setHTMLElemStyle('display', 'none', 'nota_1', false);
  tweenCamera('camera_003', 'camera_direccion_003', 1, function() {
    setHTMLElemStyle('display', 'flex', 'nota_2', false);
    eventHTMLElem('click', ['one-a', 'one-b', 'one-c', 'one-d'], false, function(event) {
      setHTMLElemStyle('display', 'flex', 'btn_next_2', false);
    });
  }, 0);
});
eventHTMLElem('click', 'btn_next_2', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_2.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_3.mp3'), false);
  setHTMLElemStyle('display', 'none', 'btn_next_2', false);
  setHTMLElemStyle('display', 'none', 'nota_2', false);
  setHTMLElemStyle('display', 'flex', 'nota_3', false);
  tweenCamera('camera_004', 'camera_direccion_004', 1, function() {
    outline('vara_enelsuelo', 'ENABLE');
    vara_en_el_suelo_1 = true;
    registerOnClick('vara_enelsuelo', false, false, [0,1,2], function() {
      if (vara_en_el_suelo_1 == true) {
        vara_en_el_suelo_1 = false;
        outline('vara_enelsuelo', 'DISABLE');
        changeVis('vara_enelsuelo', false);

        operateAnimation('PLAY', getAnimations('vara_en_andamio'), 194, 195, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'flex', 'btn_next_3', false);
        }, false);

            }
    }, function() {});
  }, 0);
});
eventHTMLElem('click', 'btn_next_3', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_3.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_4.mp3'), false);
  setHTMLElemStyle('display', 'none', 'btn_next_3', false);
  setHTMLElemStyle('display', 'none', 'nota_3', false);
  setHTMLElemStyle('display', 'flex', 'nota_4', false);
  tweenCamera('camera_005', 'camera_direccion_005', 1, function() {
    outline('etiqueta_roja', 'ENABLE');
    etiqueta_roja_1 = true;
    registerOnClick('etiqueta_roja', false, false, [0,1,2], function() {
      if (etiqueta_roja_1 == true) {
        etiqueta_roja_1 = false;
        outline('etiqueta_roja', 'DISABLE');

        operateAnimation('PLAY', getAnimations('etiqueta_roja'), 244, 260, 'AUTO', 1,
                function() {

          operateAnimation('PLAY', getAnimations('etiqueta_verde'), 244, 245, 'AUTO', 1,
                  function() {
            setHTMLElemStyle('display', 'flex', 'btn_next_4', false);
          }, false);

              }, false);

            }
    }, function() {});
  }, 0);
});
eventHTMLElem('click', 'btn_next_4', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_4.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_5.mp3'), false);
  registerSetTimeout(5, function() {
    outline('lineadevida', 'ENABLE');
    linea_de_vida_1 = true;
    registerOnClick('lineadevida', false, false, [0,1,2], function() {
      if (linea_de_vida_1 == true) {
        linea_de_vida_1 = false;
        outline('lineadevida', 'DISABLE');
        setHTMLElemStyle('display', 'none', 'nota_5', false);
        setHTMLElemStyle('display', 'flex', 'nota_5_1', false);
        playSound(loadMedia_HTML5('./audios/nota_5_1.mp3'), false);
        registerSetTimeout(4, function() {
          setHTMLElemStyle('display', 'flex', 'btn_next_5_1', false);
        });

        operateAnimation('PLAY', 'lineadevida', 305, 365, 'AUTO', 0.5,
                function() {}, false);

            }
    }, function() {});
  });
  setHTMLElemStyle('display', 'none', 'btn_next_4', false);
  setHTMLElemStyle('display', 'none', 'nota_4', false);
  setHTMLElemStyle('display', 'flex', 'nota_5', false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {}, 0);
});
eventHTMLElem('click', 'btn_next_5_1', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_5.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_5_2.mp3'), false);
  registerSetTimeout(5, function() {
    linea_de_vida_2 = true;
    outline('lineadevida_desperfecto', 'ENABLE');
    registerOnClick('lineadevida_desperfecto', false, false, [0,1,2], function() {
      if (linea_de_vida_2 == true) {
        linea_de_vida_2 = false;
        outline('lineadevida_desperfecto', 'DISABLE');
        setHTMLElemStyle('display', 'none', 'nota_5_2', false);
        setHTMLElemStyle('display', 'flex', 'nota_5_3', false);
        stopSound(loadMedia_HTML5('./audios/nota_5_2.mp3'));
        playSound(loadMedia_HTML5('./audios/nota_5_3.mp3'), false);
        registerSetTimeout(4, function() {
          setHTMLElemStyle('display', 'flex', 'btn_next_5_3', false);
        });

        operateAnimation('PLAY', 'lineadevida_desperfecto', 390, 450, 'AUTO', 0.5,
                function() {}, false);

            }
    }, function() {});
  });
  setHTMLElemStyle('display', 'none', 'btn_next_5_1', false);
  setHTMLElemStyle('display', 'none', 'nota_5_1', false);
  setHTMLElemStyle('display', 'flex', 'nota_5_2', false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {

    operateAnimation('PLAY', 'lineadevida', 365, 375, 'AUTO', 0.5,
            function() {}, false);

        }, 0);
});
eventHTMLElem('click', 'btn_next_5_3', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_5_3.mp3'));
  setHTMLElemStyle('display', 'none', 'btn_next_5_3', false);
  setHTMLElemStyle('display', 'none', 'nota_5_3', false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {

    operateAnimation('PLAY', 'lineadevida_desperfecto', 450, 460, 'AUTO', 0.5,
            function() {
      playSound(loadMedia_HTML5('./audios/nota_5_4.mp3'), false);
      setHTMLElemStyle('display', 'flex', 'nota_5_4', false);
      setHTMLElemStyle('display', 'flex', ['etiqueta_linea_1', 'etiqueta_linea_2'], false);
      bindHTMLObject('lineadevida', 'etiqueta_linea_1', false);
      bindHTMLObject('lineadevida_desperfecto', 'etiqueta_linea_2', false);
      eventHTMLElem('click', ['option_linea_1', 'option_linea_2'], false, function(event) {
        setHTMLElemAttribute('style', 'pointer-events:none; background-color: rgb(43 130 66);', 'option_linea_1', false);
        setHTMLElemAttribute('style', 'pointer-events:none; ', 'option_linea_2', false);
        setHTMLElemStyle('display', 'flex', 'btn_next_5_4', false);
      });
    }, false);

        }, 0);
});
eventHTMLElem('click', 'btn_next_5_4', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_5_4.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_5_5.mp3'), false);
  registerSetTimeout(4, function() {
    setHTMLElemStyle('display', 'flex', 'btn_next_5_5', false);
  });
  setHTMLElemStyle('display', 'none', 'btn_next_5_4', false);
  setHTMLElemStyle('display', 'none', 'nota_5_4', false);
  setHTMLElemStyle('display', 'flex', 'nota_5_5', false);
  setHTMLElemStyle('display', 'none', ['etiqueta_linea_1', 'etiqueta_linea_2'], false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {
    changeVis('lineadevida_desperfecto', false);
  }, 0);
});


operateAnimation('SET_FRAME', getAnimations('vara_en_andamio'), 0, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('SET_FRAME', getAnimations('vara_enelsuelo'), 0, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('SET_FRAME', getAnimations('etiqueta_roja'), 0, null, 'AUTO', 1,
        function() {}, false);


eventHTMLElem('click', 'btn_next_5_5', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_5_5.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_6.mp3'), false);
  registerSetTimeout(5, function() {
    arnes_1 = true;
    outline('arnes', 'ENABLE');
    registerOnClick('arnes', false, false, [0,1,2], function() {
      if (arnes_1 == true) {
        arnes_1 = false;
        outline('arnes', 'DISABLE');
        setHTMLElemStyle('display', 'none', 'nota_6', false);
        setHTMLElemStyle('display', 'flex', 'nota_6_1', false);
        playSound(loadMedia_HTML5('./audios/nota_6_1.mp3'), false);
        registerSetTimeout(3, function() {
          setHTMLElemStyle('display', 'flex', 'btn_next_6_1', false);
        });

        operateAnimation('PLAY', 'arnes', 475, 535, 'AUTO', 0.5,
                function() {}, false);

            }
    }, function() {});
  });
  setHTMLElemStyle('display', 'none', 'btn_next_5_5', false);
  setHTMLElemStyle('display', 'none', 'nota_5_5', false);
  setHTMLElemStyle('display', 'flex', 'nota_6', false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {}, 0);
});
eventHTMLElem('click', 'btn_next_6_1', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_6_1.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_6_2.mp3'), false);
  registerSetTimeout(5, function() {
    arnes_2 = true;
    outline('arnes_desperfecto', 'ENABLE');
    registerOnClick('arnes_desperfecto', false, false, [0,1,2], function() {
      if (arnes_2 == true) {
        arnes_2 = false;
        outline('arnes_desperfecto', 'DISABLE');
        setHTMLElemStyle('display', 'none', 'nota_6_2', false);
        stopSound(loadMedia_HTML5('./audios/nota_6_2.mp3'));
        setHTMLElemStyle('display', 'flex', 'nota_6_3', false);
        playSound(loadMedia_HTML5('./audios/nota_6_3.mp3'), false);
        registerSetTimeout(3, function() {
          setHTMLElemStyle('display', 'flex', 'btn_next_6_3', false);
        });

        operateAnimation('PLAY', 'arnes_desperfecto', 560, 620, 'AUTO', 0.5,
                function() {}, false);

            }
    }, function() {});
  });
  setHTMLElemStyle('display', 'none', 'btn_next_6_1', false);
  setHTMLElemStyle('display', 'none', 'nota_6_1', false);
  setHTMLElemStyle('display', 'flex', 'nota_6_2', false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {

    operateAnimation('PLAY', 'arnes', 535, 545, 'AUTO', 0.5,
            function() {}, false);

        }, 0);
});
eventHTMLElem('click', 'btn_next_6_3', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_6_3.mp3'));
  setHTMLElemStyle('display', 'none', 'btn_next_6_3', false);
  setHTMLElemStyle('display', 'none', 'nota_6_3', false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {

    operateAnimation('PLAY', 'arnes_desperfecto', 620, 630, 'AUTO', 0.5,
            function() {
      playSound(loadMedia_HTML5('./audios/nota_6_4.mp3'), false);
      setHTMLElemStyle('display', 'flex', 'nota_6_4', false);
      setHTMLElemStyle('display', 'flex', ['etiqueta_arnes_1', 'etiqueta_arnes_2'], false);
      bindHTMLObject('arnes', 'etiqueta_arnes_1', false);
      bindHTMLObject('arnes_desperfecto', 'etiqueta_arnes_2', false);
      eventHTMLElem('click', ['option_arnes_1', 'option_arnes_2'], false, function(event) {
        setHTMLElemAttribute('style', 'pointer-events:none; background-color: rgb(43 130 66);', 'option_arnes_1', false);
        setHTMLElemAttribute('style', 'pointer-events:none; ', 'option_arnes_2', false);
        setHTMLElemStyle('display', 'flex', 'btn_next_6_4', false);
      });
    }, false);

        }, 0);
});
eventHTMLElem('click', 'btn_next_6_4', false, function(event) {
  stopSound(loadMedia_HTML5('./audios/nota_6_4.mp3'));
  playSound(loadMedia_HTML5('./audios/nota_6_5.mp3'), false);
  registerSetTimeout(3, function() {
    setHTMLElemStyle('display', 'flex', 'btn_next_6_5', false);
  });
  setHTMLElemStyle('display', 'none', 'btn_next_6_4', false);
  setHTMLElemStyle('display', 'none', 'nota_6_4', false);
  setHTMLElemStyle('display', 'flex', 'nota_6_5', false);
  setHTMLElemStyle('display', 'none', ['etiqueta_arnes_1', 'etiqueta_arnes_2'], false);
  tweenCamera('camera_006', 'camera_direccion_006', 1, function() {
    changeVis('arnes_desperfecto', false);
  }, 0);
});
eventHTMLElem('click', 'btn_next_6_5', false, function(event) {
  playSound(loadMedia_HTML5('./audios/nota_7.mp3'), false);
  registerSetTimeout(7, function() {
    setHTMLElemStyle('display', 'flex', 'btn_next_7', false);
  });
  changeVis('personaje4', true);
  setHTMLElemStyle('display', 'none', 'btn_next_6_5', false);
  setHTMLElemStyle('display', 'none', 'nota_6_5', false);
  setHTMLElemStyle('display', 'flex', 'nota_7', false);
  tweenCamera('camera_001', 'camera_direccion_001', 1, function() {}, 0);
});
eventHTMLElem('click', 'btn_next_7', false, function(event) {
  playSound(loadMedia_HTML5('./audios/nota_8.mp3'), false);
  registerSetTimeout(5, function() {
    setHTMLElemStyle('display', 'flex', 'btn_next_8', false);
  });
  setHTMLElemStyle('display', 'none', 'btn_next_7', false);
  setHTMLElemStyle('display', 'none', 'nota_7', false);
  setHTMLElemStyle('display', 'flex', 'nota_8', false);
});
eventHTMLElem('click', 'btn_next_8', false, function(event) {
  setHTMLElemStyle('display', 'none', 'btn_next_8', false);
  setHTMLElemStyle('display', 'none', 'nota_8', false);
});

setActiveCamera('CameraReal');

setHTMLElemStyle('display', 'flex', 'menu_principal_collapse', false);

is_menu_principal_opened = true;

eventHTMLElem('click', 'menu_principal_collapse', false, function(event) {
  if (is_menu_principal_opened == false) {
    is_menu_principal_opened = true;
    setHTMLElemStyle('display', 'flex', 'submenu_1', false);
    setHTMLElemStyle('display', 'flex', 'submenu_2', false);
    setHTMLElemStyle('display', 'flex', 'submenu_3', false);
    setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
    setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
    setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
    setHTMLElemStyle('display', 'none', 'volver_submenu_1', false);
    setHTMLElemStyle('display', 'none', 'volver_submenu_2', false);
    setHTMLElemStyle('display', 'none', 'volver_submenu_3', false);
  } else {
    is_menu_principal_opened = false;
    setHTMLElemStyle('display', 'none', 'submenu_1', false);
    setHTMLElemStyle('display', 'none', 'submenu_2', false);
    setHTMLElemStyle('display', 'none', 'submenu_3', false);
  }
});

eventHTMLElem('click', 'menu_principal', false, function(event) {
  setHTMLElemAttribute('innerHTML', 'Área de Flotación', 'tituloEquipo', false);
  setHTMLElemStyle('display', 'none', 'menu_principal', false);
  setHTMLElemStyle('display', 'flex', 'submenu_1', false);
  setHTMLElemStyle('display', 'flex', 'submenu_2', false);
  setHTMLElemStyle('display', 'flex', 'submenu_3', false);
  setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
  setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  setHTMLElemStyle('display', 'none', 'volver_submenu_1', false);
  setHTMLElemStyle('display', 'none', 'volver_submenu_2', false);
  setHTMLElemStyle('display', 'none', 'volver_submenu_3', false);
  setHTMLElemStyle('display', 'flex', 'menu_principal_collapse', false);
});

eventHTMLElem('click', 'submenu_1_btn', false, function(event) {
  setHTMLElemAttribute('alt', 'pointer-events:none; opacity:0.5;', 'submenu_1_btn', false);
  setHTMLElemStyle('display', 'flex', 'submenu_1_opciones', false);
});

eventHTMLElem('click', 'submenu_1', false, function(event) {
  setHTMLElemStyle('display', 'none', 'menu_principal_collapse', false);
  is_menu_principal_opened = true;
  setHTMLElemStyle('display', 'none', 'submenu_1', false);
  setHTMLElemStyle('display', 'none', 'submenu_2', false);
  setHTMLElemStyle('display', 'none', 'submenu_3', false);
  setHTMLElemStyle('display', 'none', 'nota_1', false);
  setHTMLElemStyle('display', 'flex', 'submenu_1_opciones', false);
  setHTMLElemStyle('display', 'flex', 'menu_principal', false);
});

eventHTMLElem('click', 'btn_cerrar_info_equipo_1', false, function(event) {
  setHTMLElemStyle('display', 'none', 'info_equipo_1', false);
  tweenCamera('Camara000', 'CamaraDireccion000', 1, function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
  }, 0);
});

eventHTMLElem('click', 'submenu_2', false, function(event) {
  setHTMLElemStyle('display', 'none', 'menu_principal_collapse', false);
  is_menu_principal_opened = true;
  setHTMLElemStyle('display', 'none', 'submenu_1', false);
  setHTMLElemStyle('display', 'none', 'submenu_2', false);
  setHTMLElemStyle('display', 'none', 'submenu_3', false);
  setHTMLElemStyle('display', 'none', 'nota_1', false);
  setHTMLElemStyle('display', 'flex', 'submenu_2_opciones', false);
  setHTMLElemStyle('display', 'flex', 'menu_principal', false);
});

eventHTMLElem('click', 'submenu_3', false, function(event) {
  setHTMLElemStyle('display', 'none', 'menu_principal_collapse', false);
  is_menu_principal_opened = true;
  setHTMLElemStyle('display', 'none', 'submenu_1', false);
  setHTMLElemStyle('display', 'none', 'submenu_2', false);
  setHTMLElemStyle('display', 'none', 'submenu_3', false);
  setHTMLElemStyle('display', 'none', 'nota_1', false);
  setHTMLElemStyle('display', 'flex', 'submenu_3_opciones', false);
  setHTMLElemStyle('display', 'flex', 'menu_principal', false);
});

eventHTMLElem('click', 'btn_cerrar_info_equipo_1_1', false, function(event) {
  tweenCamera('Camara001', 'CamaraDireccion001', 1, function() {
    setHTMLElemStyle('display', 'none', 'info_equipo_1', false);
    outline(['ALL_OBJECTS'], 'DISABLE');
  }, 0);
});

'4510 SAL 012';

is_opened_submenu1 = false;

eventHTMLElem('click', 'volver_submenu_1', false, function(event) {
  if (is_opened_submenu1 == false) {
    is_opened_submenu1 = true;
    setHTMLElemAttribute('innerHTML', 'FLOTACIÓN ROUGHER', 'tituloEquipo', false);
    setHTMLElemStyle('display', 'flex', 'submenu_1_opciones', false);
  } else {
    is_opened_submenu1 = false;
    setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
  }
});

eventHTMLElem('click', 'equipo_1_1', false, function(event) {
  is_opened_submenu1 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_1_1 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2:155 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
  tweenCamera('Camara001', 'CamaraDireccion001', 1, function() {
    outline('4510SAL002', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_1', false);
  }, 0);
  registerOnClick('4510SAL002', false, false, [0,1,2], function() {
    if (is_eq_1_1 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_1', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_1_1_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_1', false);
  });
  setHTMLElemAttribute('innerHTML', 'Muestreador Alimentación Rougher', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_1_2', false, function(event) {
  is_opened_submenu1 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_1_2 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2:158 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
  tweenCamera('Camara002', 'CamaraDireccion002', 1, function() {
    outline('4510FTR001A024', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_1', false);
  }, 0);
  registerOnClick('4510FTR001A024', false, false, [0,1,2], function() {
    if (is_eq_1_2 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_2', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_1_2_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_2', false);
  });
  setHTMLElemAttribute('innerHTML', 'Celdas Rougher', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_1_3', false, function(event) {
  is_opened_submenu1 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_1_3 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 157},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
  tweenCamera('Camara003', 'CamaraDireccion003', 1, function() {
    outline('4510SAL004', 'ENABLE');
    outline('4510SAL016', 'ENABLE');
    outline('4510SAL017', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_1', false);
  }, 0);
  registerOnClick('4510SAL004', false, false, [0,1,2], function() {
    if (is_eq_1_3 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_3', false);
    }
  }, function() {});
  registerOnClick('4510SAL016', false, false, [0,1,2], function() {
    if (is_eq_1_3 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_3_2', false);
    }
  }, function() {});
  registerOnClick('4510SAL017', false, false, [0,1,2], function() {
    if (is_eq_1_3 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_3_3', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_1_3_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_3', false);
  });
  eventHTMLElem('click', 'info_equipo_1_3_2_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_3_2', false);
  });
  eventHTMLElem('click', 'info_equipo_1_3_3_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_3_3', false);
  });
  setHTMLElemAttribute('innerHTML', 'Muestreador Colas Rougher', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_1_4', false, function(event) {
  is_opened_submenu1 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_1_4 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 156},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_1_opciones', false);
  tweenCamera('Camara004', 'CamaraDireccion004', 1, function() {
    outline('4510SAL003', 'ENABLE');
    outline('4510SAL300', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_1', false);
  }, 0);
  registerOnClick('4510SAL003', false, false, [0,1,2], function() {
    if (is_eq_1_4 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_4', false);
    }
  }, function() {});
  registerOnClick('4510SAL300', false, false, [0,1,2], function() {
    if (is_eq_1_4 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_1_4_2', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_1_4_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_4', false);
  });
  eventHTMLElem('click', 'info_equipo_1_4_2_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_1_4_2', false);
  });
  setHTMLElemAttribute('innerHTML', 'Muestreador Cortador Concentrado Rougher', 'tituloEquipo', false);
});

is_opened_submenu2 = false;

eventHTMLElem('click', 'volver_submenu_2', false, function(event) {
  if (is_opened_submenu2 == false) {
    is_opened_submenu2 = true;
    setHTMLElemAttribute('innerHTML', 'REMOLIENDA', 'tituloEquipo', false);
    setHTMLElemStyle('display', 'flex', 'submenu_2_opciones', false);
  } else {
    is_opened_submenu2 = false;
    setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
  }
});

eventHTMLElem('click', 'equipo_2_1', false, function(event) {
  is_opened_submenu2 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_2_1 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 159},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
  tweenCamera('Camara005', 'CamaraDireccion005', 1, function() {
    outline('4530PPS012A14', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_2', false);
  }, 0);
  registerOnClick('4530PPS012A14', false, false, [0,1,2], function() {
    if (is_eq_2_1 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_2_1', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_2_1_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_2_1', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bomba Alimentación Ciclones', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_2_2', false, function(event) {
  is_opened_submenu2 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_2_2 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 160},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
  tweenCamera('Camara006', 'CamaraDireccion006', 1, function() {
    outline('<none>', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_2', false);
  }, 0);
  registerOnClick('4530CSC003Y004', false, false, [0,1,2], function() {
    if (is_eq_2_2 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_2_2', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_2_2_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_2_2', false);
  });
  setHTMLElemAttribute('innerHTML', 'Hidrociclón Remolienda', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_2_3', false, function(event) {
  is_opened_submenu2 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_2_3 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 161},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
  tweenCamera('Camara007', 'CamaraDireccion007', 1, function() {
    outline('4530MLT001A003', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_2', false);
  }, 0);
  registerOnClick('4530MLT001A003', false, false, [0,1,2], function() {
    if (is_eq_2_3 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_2_3', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_2_3_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_2_3', false);
  });
  setHTMLElemAttribute('innerHTML', 'Molino Remolienda', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_2_4', false, function(event) {
  is_opened_submenu2 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_2_4 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 162},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_2_opciones', false);
  tweenCamera('Camara008', 'CamaraDireccion008', 1, function() {
    outline('4530PPS009A011', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_2', false);
  }, 0);
  registerOnClick('4530PPS009A011', false, false, [0,1,2], function() {
    if (is_eq_2_4 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_2_4', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_2_4_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_2_4', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bomba de Recirculación', 'tituloEquipo', false);
});

is_opened_submenu3 = false;

eventHTMLElem('click', 'volver_submenu_3', false, function(event) {
  if (is_opened_submenu3 == false) {
    is_opened_submenu3 = true;
    setHTMLElemAttribute('innerHTML', ' FLOTACIÓN PRE-CLEANER / COLUMNAS CLEANER SCAVENGER', 'tituloEquipo', false);
    setHTMLElemStyle('display', 'flex', 'submenu_3_opciones', false);
  } else {
    is_opened_submenu3 = false;
    setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  }
});

eventHTMLElem('click', 'equipo_3_1', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_1 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'window.parent.postMessage({param1: 1, param2:163 },\'*\');')(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara009', 'CamaraDireccion009', 1, function() {
    outline('4530PPS028Y029', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530PPS028Y029', false, false, [0,1,2], function() {
    if (is_eq_3_1 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_1', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_1_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_1', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bombas Producto Remolienda', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_2', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_2 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2:164 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara010', 'CamaraDireccion010', 1, function() {
    outline('4530FTC002Y004', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530FTC002Y004', false, false, [0,1,2], function() {
    if (is_eq_3_2 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_2', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_2_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_2', false);
  });
  setHTMLElemAttribute('innerHTML', 'Columna Cleaner 1 y 2', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_3', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_3 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 165 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara011', 'CamaraDireccion011', 1, function() {
    outline('4530FTC003Y005', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530FTC003Y005', false, false, [0,1,2], function() {
    if (is_eq_3_3 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_3', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_3_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_3', false);
  });
  setHTMLElemAttribute('innerHTML', 'Columna Scavenger 1 y 2', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_4', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_4 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 166 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara012', 'CamaraDireccion012', 1, function() {
    outline('4530PPS208Y209', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530PPS208Y209', false, false, [0,1,2], function() {
    if (is_eq_3_4 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_4', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_4_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_4', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bombas Colas Columnas Cleaner', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_5', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_5 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 167},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara013', 'CamaraDireccion013', 1, function() {
    outline('4530SAL005', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530SAL005', false, false, [0,1,2], function() {
    if (is_eq_3_5 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_5', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_5_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_5', false);
  });
  setHTMLElemAttribute('innerHTML', 'Muestreador Concentrado Colectivo', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_6', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_6 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 168 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara014', 'CamaraDireccion014', 1, function() {
    outline('4530PPS212Y213', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530PPS212Y213', false, false, [0,1,2], function() {
    if (is_eq_3_6 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_6', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_6_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_6', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bombas Concentrado Rougher', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_7', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_7 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 169},\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara015', 'CamaraDireccion015', 1, function() {
    outline('4530FTA001A008', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530FTA001A008', false, false, [0,1,2], function() {
    if (is_eq_3_7 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_7', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_7_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_7', false);
  });
  setHTMLElemAttribute('innerHTML', 'Celdas de Flotación Pre-Cleaner', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_8', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_8 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 170 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara016', 'CamaraDireccion016', 1, function() {
    outline('4530SAL006', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530SAL006', false, false, [0,1,2], function() {
    if (is_eq_3_8 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_8', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_8_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_8', false);
  });
  setHTMLElemAttribute('innerHTML', 'Muestreador Colas Pre-Cleaner', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_9', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_9 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2:171 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara017', 'CamaraDireccion017', 1, function() {
    outline('4530PPS242Y244', 'ENABLE');
    outline('4530PPS243Y245', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4530PPS242Y244', false, false, [0,1,2], function() {
    if (is_eq_3_9 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_9', false);
    }
  }, function() {});
  registerOnClick('4530PPS243Y245', false, false, [0,1,2], function() {
    if (is_eq_3_9 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_9_2', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_9_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_9', false);
  });
  eventHTMLElem('click', 'info_equipo_3_9_2_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_9_2', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bombas Recirculación Sistema Microcel Celdas Columna', 'tituloEquipo', false);
});

eventHTMLElem('click', 'equipo_3_10', false, function(event) {
  is_opened_submenu3 = false;
  setToFalseAllVariablesEquipoActual();
  is_eq_3_10 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2:172 },\'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'none', 'submenu_3_opciones', false);
  tweenCamera('Camara018', 'CamaraDireccion018', 1, function() {
    outline('4550PPS201A210', 'ENABLE');
    setHTMLElemStyle('display', 'flex', 'volver_submenu_3', false);
  }, 0);
  registerOnClick('4550PPS201A210', false, false, [0,1,2], function() {
    if (is_eq_3_10 == true) {
      setHTMLElemStyle('display', 'flex', 'info_equipo_3_10', false);
    }
  }, function() {});
  eventHTMLElem('click', 'info_equipo_3_10_btnCerrar', false, function(event) {
    setHTMLElemStyle('display', 'none', 'info_equipo_3_10', false);
  });
  setHTMLElemAttribute('innerHTML', 'Bombas de Dosificación de Espumante (DF250)', 'tituloEquipo', false);
});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



})(); // end of closure
